openapi: 3.0.3
info:
  title: Swagger Subsidy CRM - OpenAPI 3.0
  description: |-
    Based on our design first approach, this is an API design and documentation based on the OpenAPI 3.0 specification for our Subsidy CRM Project.

    Some useful links:
    - [The Subsidy CRM repository](https://github.com/rakeshsahuinfo/subsidycrm_aws)

  contact:
    email: hello@whizzact.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Here you can find the design documentation for the application
  url: https://docs.google.com/spreadsheets/d/1z9GJmY8C16zSpZ20JRSRorU9PF_IifVHAFxGl2acfJk/edit?usp=drive_link
servers:
  - url: https://subsidycrm.swagger.io/api/v1
tags:
  - name: Customer
    description: APIs to manage Customer object
  - name: Bookings
    description: APIs to manage Bookings object for a Customer
  - name: User
    description: APIs to manage User object
  - name: Payment
    description: APIs to manage Payments and Invoices object 
  - name: Auth
    description: APIs to manage Authentication
  - name: Notification
    description: APIs to manage notifications
  - name: Enum
    description: APIs to manage Enum configurations
paths:
  /customer:
    get:
      tags:
        - Customer
      summary: Find all customers
      description: Find all customers and filter them based on the conditions provided
      operationId: getCustomers
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: active
            enum:
              - active
              - inactive
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid status value

    post:
      tags:
        - Customer
      summary: Add a new Customer
      description: Add a new Customer to the CRM System
      operationId: addCustomer
      requestBody:
        required: true
        description: Create a new Customer in the CRM System
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer' 
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /customer/{customerId}:
    get:
      tags:
        - Customer
      summary: Find Customer by ID
      description: Returns a single Customer details
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: ID of Customer to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
    put:
      tags:
        - Customer
      summary: Update an existing Customer
      description: Update an existing Customer by Id
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          description: ID of Customer to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existing Customer in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: Customer Successfully Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid ID supplied
        '404':
          description: Customer not found
        '422':
          description: Validation exception

  /auth/register:
    post:
      summary: "Registers a new user."
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "john_doe"
              email:
                type: "string"
                format: "email"
                example: "john_doe@example.com"
              password:
                type: "string"
                example: "securePassword123"
      responses:
        "200":
          description: "User registered successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User registered successfully."
        "400":
          description: "Bad request. Invalid input."
        "500":
          description: "Internal server error."
  /auth/login:
    post:
      summary: "Logs in a user."
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
                example: "john_doe@example.com"
              password:
                type: "string"
                example: "securePassword123"
      responses:
        "200":
          description: "User logged in successfully."
          schema:
            type: "object"
            properties:
              token:
                type: "string"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "Unauthorized. Invalid credentials."
        "500":
          description: "Internal server error."
  /auth/me:
    post:
      summary: "Retrieves user details."
      responses:
        "200":
          description: "User details retrieved successfully."
          schema:
            type: "object"
            properties:
              id:
                type: "string"
                example: "12345"
              username:
                type: "string"
                example: "john_doe"
              email:
                type: "string"
                format: "email"
                example: "john_doe@example.com"
        "401":
          description: "Unauthorized. Invalid or missing token."
        "500":
          description: "Internal server error."
  /auth/refresh:
    post:
      summary: "Refreshes the user token."
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              refreshToken:
                type: "string"
                example: "someRefreshToken123"
      responses:
        "200":
          description: "Token refreshed successfully."
          schema:
            type: "object"
            properties:
              token:
                type: "string"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: "Unauthorized. Invalid or expired refresh token."
        "500":
          description: "Internal server error."
  /auth/logout:
    post:
      summary: "Logs out a user."
      responses:
        "200":
          description: "User logged out successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "User logged out successfully."
        "401":
          description: "Unauthorized. Invalid or missing token."
        "500":
          description: "Internal server error."
  /auth/reset-password:
    post:
      summary: "Resets the user password."
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                format: "email"
                example: "john_doe@example.com"
      responses:
        "200":
          description: "Password reset instructions sent."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Password reset instructions sent."
        "400":
          description: "Bad request. Invalid email."
        "500":
          description: "Internal server error."
  /auth/change-password:
    post:
      summary: "Changes the user password."
      consumes:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              oldPassword:
                type: "string"
                example: "oldSecurePassword123"
              newPassword:
                type: "string"
                example: "newSecurePassword123"
      responses:
        "200":
          description: "Password changed successfully."
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Password changed successfully."
        "400":
          description: "Bad request. Invalid input."
        "401":
          description: "Unauthorized. Invalid old password or missing token."
        "500":
          description: "Internal server error."
          
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the customer
        name:
          type: string
          description: Customer's name
        email:
          type: string
          description: Customer's email address
        mobile:
          type: string
          description: Customer's mobile number
        address:
          type: string
          description: Customer's residential address
        product:
          type: integer
          description: Reference to product
        model:
          type: integer
          description: Reference to model
        varient:
          type: integer
          description: Reference to variant
        modification:
          type: integer
          description: Reference to modification
        referenceBy:
          type: string
          description: Name of the person or entity who referred the customer
        createdDate:
          type: string
          format: date-time
          description: Timestamp when the record was created
        updatedDate:
          type: string
          format: date-time
          description: Timestamp when the record was last updated
        createdBy:
          type: integer
          description: ID of the user who created the record
        updatedBy:
          type: integer
          description: ID of the user who last updated the record
      required:
        - name
        - email
        - mobile
        - address
